/*
    This file is part of Advanced Strategic Command; http://www.asc-hq.de
    Copyright (C) 1994-2001  Martin Bickel, Marc Schellenberger and
    Steffen Froehlich
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; see the file COPYING. If not, write to the 
    Free Software Foundation, Inc., 59 Temple Place, Suite 330, 
    Boston, MA  02111-1307  USA
*/
// Version v2.0 , change also GENERAL


#include <stdio.h>
#include <stdlib.h>

#include "../tpascal.inc"
#include "../typen.h"
#include "../basestrm.h"
#include "../misc.h"
#include "../sgstream.h"
#include "../buildingtype.h"
#include "../vehicletype.h"
#include "../errors.h"
#include "../graphicset.h"
#include "../ascstring.h"
#include "../itemrepository.h"
#include "../strtmesg.h"
#include "../basegfx.h"
#include "../loadpcx.h"


// including the command line parser, which is generated by genparse
#include "../clparser/weaponguide.cpp"

FILE* createFile ( const ASCString& filename )
{
   return fopen ( filename.c_str(), "w" );
}

void printMainLine ( FILE* fp, const ASCString& index, const ASCString& value )
{
  fprintf ( fp, "<tr><th class=\"WG\"> %s  </th> <td align=\"center\">%s</td>", index.c_str(), value.c_str() );
}

void printMainLine ( FILE* fp, const ASCString& index, int value )
{
   printMainLine ( fp, index, strrr ( value ));
}

int main(int argc, char *argv[] )
{
   Cmdline cl ( argc, argv );

   if ( cl.v() ) {
      cout << argv[0] << " " << getVersionString() << endl;
      exit(0);
   }

   verbosity = cl.r();

   initFileIO( cl.c(), 4 );  // passing the filename from the command line options
   ASCString prefixDir = cl.d();
   if ( !prefixDir.empty() )
      appendbackslash ( prefixDir );

   try {

   
      loadpalette();
      loadbi3graphics();

      loadalltextfiles();
      loadallobjecttypes();
      loadallbuildingtypes();
      loadallvehicletypes();
      loadUnitSets();
      
      freetextdata();


      char* wildcard;

      if ( cl.next_param() < argc ) {
         wildcard = argv[cl.next_param()];
         // if a command line parameter is specified, use it as wildcard
         // for example: weaponguide s*.veh
      }
      else {
         wildcard =  "*";
         // else use all verhicles
      }

      FILE* overview  = createFile ( prefixDir+"overview.html" );
      FILE* overview1 = createFile ( prefixDir+"overview1.html" );
      // opens a file for writing and assigns the file pointer overview to it

      // Beginn des HTML Files HEAD und BODY
      //  \n is the sequence to start a new line

      fprintf ( overview , "<html>\n"
                "<HEAD>\n"
                "<TITLE>UNITGUIDE OVERVIEW LEFT</TITLE>\n"
                "<base target=\"base\">\n"
                "<LINK REL=\"stylesheet\" TYPE=\"text/css\" HREF=\"../ug.css\">\n"
                "</HEAD>\n"
                "\n"
                "<BODY class=\"WG\">\n"
                "<table width=\"100%\"  class=\"WG\" >\n"
                "<tr><td><a href=\"overview1.html\">SEE PICTURES</a></td></tr><tr><td></td></tr>\n" );

      fprintf ( overview1 , "<html>\n"
                "<HEAD>\n"
                "<TITLE>WEAPONGUIDE OVERVIEW PICTURES</TITLE>\n"
                "<LINK REL=\"stylesheet\" TYPE=\"text/css\" HREF=\"../ug.css\">\n"
                "</HEAD>\n"
                "\n"
                "<BODY class=\"WG\">\n" );

      for ( int unit = 0; unit < vehicletypenum; unit++ ) {
         pvehicletype  ft = getvehicletype_forpos ( unit );
         ASCString fn = extractFileName_withoutSuffix( ft->filename );


         bool setmatch = false;
         if ( cl.s() > 0 ) {
            for ( std::vector<SingleUnitSet*>::iterator i = unitSets.begin(); i != unitSets.end(); i++  )
               if ( (*i)->ID == cl.s() )
                  if ( (*i)->isMember( ft->id ))
                     setmatch = true;
         } else
            setmatch = true;

         
         if ( patimat ( wildcard, ft->filename.c_str() ) && setmatch ) {
            ASCString cn = fn;
            cn.toLower();
            // now we are cycling through all files that match wildcard

            printf(" processing unit %s , ID %d ... ", ft->description.c_str(), ft->id );


            string s, s1, s2, s3, s4, s5, s6, b1, b2;
            s = s1 = s2 = s3 = s4 = s5 = s6 = b1 = b2 = cn;

            // this is a C++ string which is much more powerful than the standard C strings ( char* )

            s += ".html";    // frame
            s1 += "1.html";  // general
            s2 += "2.html";  // movement
            s3 += "3.html";  // weapon
            s4 += "4.html";  // functions
            s5 += "5.html";  // loading
            s6 += "6.html";  // description
            b1 += ".gif";    // little pic
            b2 += ".jpg";    // big pic

            FILE* detailed = createFile ( prefixDir +  s );
            FILE* detailed1 = createFile ( prefixDir + s1 );
            FILE* detailed2 = createFile ( prefixDir + s2 );
            FILE* detailed3 = createFile ( prefixDir + s3 );
            FILE* detailed4 = createFile ( prefixDir + s4 );
            FILE* detailed5 = createFile ( prefixDir + s5 );
            FILE* detailed6 = createFile ( prefixDir + s6 );

            // Beginn Einzelfiles
            // UNIT FRAME
            fprintf ( detailed, "<html>\n"
                      "<HEAD>\n"
                      "<TITLE>UNITGUIDE FRAME</TITLE>\n"
                      "<frameset  cols=\"50%%,*\" border=0 >\n"
                      "<frame name=\"over\" src=\"%s\" marginheight=\"0\">\n"
                      "<frame name=\"under\" src=\"%s\" marginheight=\"2\">\n"
                      "<noframes><body class=\"WG\"><p>Diese Seite verwendet Frames. Frames werden von Ihrem Browser aber nicht unterstützt.</p></body></noframes>\n"
                      "</frameset>\n"
                      "</html>\n", s1.c_str() , s6.c_str() );

            const char* header = "<html>\n"
                      "<HEAD>\n"
                      "<TITLE>%s</TITLE>\n"
                      "<base target=\"under\"> \n"
                      "<LINK REL=\"stylesheet\" TYPE=\"text/css\" HREF=\"../ug.css\">\n"
                      "</HEAD>\n"
                      "\n"
                      "<BODY  class=\"WG\">\n";
                      
            // UNIT GENERAL
            fprintf ( detailed1, header, "general" );

            // UNIT TERRAIN
            fprintf ( detailed2, header, "movement" );

            // UNIT WEAPONS
            fprintf ( detailed3, header, "terrain" );
            
            // UNIT FUNCTIONS
            fprintf ( detailed4, header, "unitguide functions" );

            // UNIT LOADING
            fprintf ( detailed5, header, "transportation" );

            // UNIT DESCRIPTION
            fprintf ( detailed6, header, "description" );

            // OVERVIEW LEFT
            fprintf ( overview, " <tr><td><A HREF=\"%s\">", s.c_str() );
            fprintf ( overview, "%s", ft->getName().c_str() );
            fprintf ( overview, " </A></td></tr>\n" );

            // OVERVIEW RIGHT
            fprintf ( overview1, "<table align=\"center\"  class=\"WG\" >\n"
                      " <tr><td rowspan=\"2\" width=\"50\">" );
            if ( exist ( b1.c_str() ))
               fprintf ( overview1, "<img src=\"%s\" border=\"0\">", b1.c_str() );
            fprintf ( overview1, "</td><td width=\"140\"><A HREF=\"%s\">%s</A></td></tr><tr><td><a href=\"%s\">%s</a></td></tr></table>\n", s.c_str(), ft->name.c_str(), s.c_str(), ft->description.c_str() );

            // END OVERVIEW RIGHT

            // we are adding a link to the overview file.
            // to put a singile " into a string we must use double quotes ( "" ), because a single quote is interpreted as the end of the string by C
            // %s tells C to insert a string there. The strings are appended at the end of the command
            // at the first %s the filename in s is inserted, at the second %s the unit variable 'description'

            // UNIT GENERAL
            /*
            fprintf ( detailed1, "<table width=\"100%\" border=\"1\" class=\"WG\"> \n"
                      "<tr><td colspan=\"2\"></td><td id=\"H9\" align=\"right\">UNIT GUIDE v2.1 </td></tr>"
                      "<tr><td width=\"50\">" );

            // if there is a big image for this unit, insert it                      
            if ( exist ( b1.c_str() ))
               fprintf ( detailed1, "<img src=\"%s\">", b1.c_str() );
               
            fprintf ( detailed1, "</td>\n<td>" );

            fprintf ( detailed1, "<table class=\"WG\"> \n" );
            fprintf ( detailed1, "<tr>  <th class=\"WG\"> Name</th>  <td align=\"center\" colspan=\"4\">%s</td> </tr>\n", ft->name.c_str() );

            */
            
            fprintf ( detailed1, "<table class=\"WG\"> \n" );
            
            printMainLine ( detailed1, "Image", ASCString("<img src=\"") + cn + ".gif\" width=\"96\" height=\"96\">" );
            printMainLine ( detailed1, "Description", ft->description );
            printMainLine ( detailed1, "ID", ft->id );
            printMainLine ( detailed1, "Empty weight", ft->weight );
            printMainLine ( detailed1, "Group", cmovemalitypes[ft->movemalustyp] );
            printMainLine ( detailed1, "Armor", ft->armor );
            printMainLine ( detailed1, "View",  ft->view );
            printMainLine ( detailed1, "Radar Jamming", ft->jamming );
            printMainLine ( detailed1, "Production Cost Material", ft->productionCost.material );
            printMainLine ( detailed1, "Production Cost energy", ft->productionCost.energy );
            printMainLine ( detailed1, "Unit can attack after moving", ft->wait ? "yes": "no" );
            printMainLine ( detailed1, "Unit can move after attacking", ft->functions & cf_moveafterattack ? "yes": "no" );
            printMainLine ( detailed1, "Armor", ft->armor );

            ASCString funcs;
            for ( int i = 0; i<cvehiclefunctionsnum; i++)
               if ( ft->functions & ( 1 << i ))
                  funcs += ASCString(cvehiclefunctions[i]) + "<br>";
            printMainLine ( detailed1, "Functions , Properties", funcs );

            printMainLine ( detailed1, "max. Wind", ft->maxwindspeedonwater );
            printMainLine ( detailed1, "Auto Repair Rate [%%]", ft->autorepairrate );
            printMainLine ( detailed1, "Resource detection radius", ft->digrange );
                                    
            fprintf ( detailed1, "</table>\n" );

            /*
            fprintf ( detailed1, "</td>\n\n<td class=\"WG\">" );
            if ( exist ( b2.c_str() ))
               fprintf ( detailed1, "<img src=\"%s\">", b2.c_str() );
            fprintf ( detailed1, "</td></tr></table>\n" );
            */
            
            fprintf ( detailed1, "<table class=\"WG\"><tr align=\"center\">" );
            fprintf ( detailed1, "<td><a href=\"%s\">MOVEMENT</a></td>", s2.c_str() );
            fprintf ( detailed1, "<td><a href=\"%s\">WEAPON SYSTEMS</a></td>" , s3.c_str() );
            fprintf ( detailed1, "<td><a href=\"%s\">CONSTRUCTION</a></td>" , s4.c_str() );
            fprintf ( detailed1, "<td><a href=\"%s\">TRANSPORTATION</a></td>" , s5.c_str() );
            fprintf ( detailed1, "<td><a href=\"%s\">INFORMATION</a></td>" , s6.c_str() );
            fprintf ( detailed1, "</tr></table>\n" );
            // END UNIT GENERAL

            // some details about the unit; %d tells C to insert a decimal number there
            // take a look at the vehicletype class in vehicletype.h for the names of all variables that make a vehicletype
            // be carefuel not to make a , at the end of the first lines, since this would seperate the string in to several independant strings

            // choehenstufen is a global array that contains the names of the height levels


            // BEGIN MOVEMENT

            // Hoehenstufen
            int i,w;
            // Tabellenbeginn
            fprintf( detailed2, "<TABLE rules=\"rows\" class=\"WG\">"
                     "<TR><th colspan=\"9\" class=\"WG\">Levels of height:</th></tr>\n<tr>");
            // Spaltentitel
            fprintf ( detailed2, "<td></td>" );
            for ( i = 0; i < 8; i++ ) {
               fprintf ( detailed2, " <TD><IMG src=\"../hoehe%d.gif\" ", i);
               if ( i==0 )
                    fprintf (detailed2, " alt=\"deep_submerged\" " );
               if ( i==1 )
                    fprintf (detailed2, " alt=\"submerged\" ");
               if ( i==2 )
                    fprintf (detailed2, " alt=\"floating\" ");
               if ( i==3 )
                    fprintf (detailed2, " alt=\"ground based\" ");
               if ( i==4 )
                    fprintf (detailed2, " alt=\"low level flight\" ");
               if ( i==5 )
                    fprintf (detailed2, " alt=\"medium level flight\" ");
               if ( i==6 )
                    fprintf (detailed2, " alt=\"high level flight\" ");
               if ( i==7 )
                    fprintf (detailed2, " alt=\"orbit\" ");
               fprintf ( detailed2, " ></TD>");
            }
            fprintf( detailed2, "</TR>\n<TR>");
            
            // Spaltenwerte Haken
            fprintf ( detailed2, "<th>Reachable</th>" );
            for ( i = 0; i < 8; i++ )
               if ( ft->height & ( 1 << i ))
                  fprintf ( detailed2, " <TD><img src=\"../haken.gif\"></TD>" );
               else
                  fprintf ( detailed2, " <TD></TD>"  );
            fprintf( detailed2, "</TR>\n<TR>");
            // Spaltenwerte pro Runde
            fprintf ( detailed2, "<th>Movement</th>" );
            
            for ( i = 0; i < 8; i++ )
               if ( ft->height & ( 1 << i ))
                  fprintf ( detailed2, " <TD align=\"center\">%d</TD>", (ft->movement[i]/10) );
               else
                  fprintf ( detailed2, " <TD></TD>"  );
            fprintf( detailed2, "</TR>\n<TR>\n");
            fprintf( detailed2, "\n</TR>\n</TABLE>\n");


            
            // Einzelne Werte
            // Tabellenbeginn
            fprintf( detailed2, "<TABLE class=\"WG\">\n" );
            printMainLine ( detailed2, "Fuel tank", ft->tank.fuel );
            printMainLine ( detailed2, "Energy tank", ft->tank.energy );
            printMainLine ( detailed2, "Material tank", ft->tank.material );
            printMainLine ( detailed2, "Fuel Consumption", ft->fuelConsumption );
            printMainLine ( detailed2, "Range", ft->fuelConsumption ? strrr(ft->tank.fuel/ft->fuelConsumption) : "--" );
            printMainLine ( detailed2, "Distance to change height", ft->steigung );
            
            fprintf( detailed2, "\n</TABLE>\n");


            fprintf( detailed2, "<TABLE class=\"WG\">\n" );
            fprintf( detailed2, "<tr><th class=\"WG\">terrain type</th><th class=\"WG\">accessible</th><th class=\"WG\">required</th><th class=\"WG\">not accessible</th><th class=\"WG\">fatal</th></tr>");

            for ( i = 0; i < cbodenartennum ; i++ ) {
               fprintf ( detailed2, " <Tr><th class=\"WG\">%s</th>", cbodenarten[i]);
            
               if ( ft->terrainaccess.terrain.test(i) )
                  fprintf ( detailed2, "<td align=\"center\"><img src=\"../haken.gif\"></td>" );
               else
                  fprintf ( detailed2, "<td></td>" );

               if ( ft->terrainaccess.terrainreq.test(i) )
                  fprintf ( detailed2, "<td align=\"center\"><img src=\"../haken.gif\"></td>" );
               else
                  fprintf ( detailed2, "<td></td>" );

               if ( ft->terrainaccess.terrainnot.test(i) )
                  fprintf ( detailed2, "<td align=\"center\"><img src=\"../haken.gif\"></td>" );
               else
                  fprintf ( detailed2, "<td></td>" );

               if ( ft->terrainaccess.terrainkill.test(i) )
                  fprintf ( detailed2, "<td align=\"center\"><img src=\"../hakenrot.gif\"></td>" );
               else
                  fprintf ( detailed2, "<td></td>" );
                                    
                                                      
               fprintf( detailed2, "</TR>\n");
            } /* endfor */

            fprintf ( detailed2, "</tr></table>\n" );

            /*
            // Erklaerungen
            fprintf( detailed2,"<br><br>\n<table class=\"WG\"><tr><th  class=\"WG\" colspan=\"3\" align=\"center\"> Erklaerungen zu den Bodentypen</th></tr>\n" );
              //only ANY  (lowland)
            fprintf( detailed2,"<tr><th class=\"WG\" colspan=\"3\">Basistypen</th></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx1.gif\"></td><td>lowland / Flachland, Wiese, Feld</td><td rowspan=\"15\">(BASIS) Diese Felder sind nur befahrbar, wenn das weisse Hackchen gesetz ist. Die Zerstörung tritt nur ein, wenn sich auf dem Feld kein anders Objekt befindet, welches ein gefahrlosen befahren zulaesst. (Brücke ueber Fluß)</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx14.gif\"></td><td>hard sand / fester Sand</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx15.gif\"></td><td>soft sand / Mullsand-Sandwueste</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx21.gif\"></td><td>mountains / normale Berge</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx4.gif\"></td><td>high mountains / hohe Berge</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx22.gif\"></td><td>very shallow water / sehr flaches wasser</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx0.gif\"></td><td>shallow water / flaches wasser</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx12.gif\"></td><td>water / normales Wasser</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx13.gif\"></td><td>deep water / tiefes Wasser</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx24.gif\"></td><td>Lava</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx25.gif\"></td><td>ditch / Befestigungen- Schützengräben</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx26.gif\"></td><td>hillside / Huegel-Gefaelle</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx27.gif\"></td><td>turret foundation / spezieller Untergrund fuer stationaere Einheiten</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx29.gif\"></td><td>Instalation</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx31.gif\"></td><td>river / fluss</td></tr>\n" );
              //only NOT (swamp,forest)
            fprintf( detailed2,"<tr><th  class=\"WG\" colspan=\"3\">Wettertypen und besondere Eigenschaften</th></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx18.gif\"></td><td>mud / Matsch, feuchte Wiesen</td><td rowspan=\"10\">Diese Feldtypen sind generell befahrbar. Eine Einheit die z.B. nicht durch Sumpf oder Wald fahren kann, hat dies speziell bei \"nicht befahrbar\" vermerkt !! Bei Einheiten darf diese Eigenschaft niemals bei \"befahrbar\" gesetzt sein. Einzige Ausnahme ist \"fozen_water\" bei Einheiten, die ueber zugefrorenes Wasser fahren koennen.</tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx28.gif\"></td><td>morass / Morast, sehr schwer befahrbares Gelaende</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx2.gif\"></td><td>swamp / Sumpf</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx19.gif\"></td><td>snow / wenig Schnee</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx20.gif\"></td><td>deep snow / tiefer Schnee</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx30.gif\"></td><td>pack ice / Packeis</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx32.gif\"></td><td>frozen water / gefrorenes Wasser</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx3.gif\"></td><td>forest / Wald</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx17.gif\"></td><td>small rocks / kleine Steine - wenig Geröll</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx23.gif\"></td><td>large rocks / große Steine - viel Geröll</td></tr>\n" );
              // plus ANY (road, rail,)
            fprintf( detailed2,"<tr><td  class=\"WG\" colspan=\"3\">Typen fuer spezielle Objekte</th></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx5.gif\"></td><td>road / Straße</td><td rowspan=\"5\">Diese Eigenschaften werden hauptsaechlich bei Objekten verwendet. Felder mit dieser Eigenschaft sind generell befahrbar, auch wenn dies nicht speziell vermerkt ist, denn sie treten nur in Zusammenhang mit einem Basisfeld auf. Ein Panzer kann Schienen ueberqueren - aber nicht, wenn sie sich über Wasser befinden. Ein Zug, der diese Eigenschaft speziell besitzt, kann das.</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx6.gif\"></td><td>railroad / Schienen</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx9.gif\"></td><td>runway / Landebahn</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx10.gif\"></td><td>pipeline / oberirdische Rohrleitung</td></tr>\n" );
            fprintf( detailed2,"<tr><td><img src=\"../gfx11.gif\"></td><td>buried pipeline / unterirdische Pipeline</td></tr>\n" );
            fprintf ( detailed2, "</table>\n" );

            // ENDE MOVEMENT
             */



             

            // BEGIN WEAPONS
            // Waffen NR-AMMO-DISTANCE-STRENGS-SHOT FROM-ATTACK TO-TYP
            fprintf ( detailed3, "<table class=\"WG\"> \n" );

            
                        
            fprintf ( detailed3, "<tr><th class=\"WG\">Weapon system </th>");
            for ( int w = 0; w < ft->weapons.count ; w++)
               fprintf ( detailed3, "<th class=\"WG\">%d </th>", w);
            fprintf ( detailed3, "</tr>");

            
            fprintf ( detailed3, "<tr><th class=\"WG\">Name</th>");
            for ( int w = 0; w < ft->weapons.count ; w++)
               fprintf ( detailed3, "<td>%s </td>", ft->weapons.weapon[w].getName().c_str());
            fprintf ( detailed3, "</tr>");
            

            fprintf ( detailed3, "<tr><th class=\"WG\">Min Range</th>");
            for ( int w = 0; w < ft->weapons.count ; w++)
               fprintf ( detailed3, "<td>%d </td>", (ft->weapons.weapon[w].mindistance+9)/10 );
            fprintf ( detailed3, "</tr>");
                        
            fprintf ( detailed3, "<tr><th class=\"WG\">Max Range</th>");
            for ( int w = 0; w < ft->weapons.count ; w++)
               fprintf ( detailed3, "<td>%d </td>", ft->weapons.weapon[w].maxdistance/10 );
            fprintf ( detailed3, "</tr>");


            fprintf ( detailed3, "<tr><th class=\"WG\">Punch @ min. range</th>");
            for ( int w = 0; w < ft->weapons.count ; w++)
               fprintf ( detailed3, "<td>%d </td>", ft->weapons.weapon[w].maxstrength );
            fprintf ( detailed3, "</tr>");

            fprintf ( detailed3, "<tr><th class=\"WG\">Punch @ max. range</th>");
            for ( int w = 0; w < ft->weapons.count ; w++)
               fprintf ( detailed3, "<td>%d </td>", ft->weapons.weapon[w].minstrength );
            fprintf ( detailed3, "</tr>");

            fprintf ( detailed3, "<tr><th class=\"WG\">Ammo</th>");
            for ( int w = 0; w < ft->weapons.count ; w++)
               fprintf ( detailed3, "<td>%d </td>", ft->weapons.weapon[w].count );
            fprintf ( detailed3, "</tr>");


            for ( int h = 0; h < 8; h++ ) {
               fprintf ( detailed3, "<tr>" );
               if ( h == 0 )
                  fprintf ( detailed3, "<th class=\"WG\" rowspan=\"8\">Targets </th>" );
                  
               for ( int w = 0; w < ft->weapons.count ; w++)
                  if ( ft->weapons.weapon[w].targ & (1 << h ))
                     fprintf ( detailed3, "<td><IMG src=\"../hoehe%d.gif\" alt=\"%s\"> </td>", h, choehenstufen[h] );
                  else
                     fprintf ( detailed3, "<td> </td>" );
               fprintf ( detailed3, "</tr>");
            }
                                                                                                                                                                                                
            for ( int h = 0; h < 8; h++ ) {
               fprintf ( detailed3, "<tr>" );
               if ( h == 0 )
                  fprintf ( detailed3, "<th class=\"WG\" rowspan=\"8\">Avail </th>" );
               for ( int w = 0; w < ft->weapons.count ; w++)
                  if ( ft->weapons.weapon[w].sourceheight & (1 << h ))
                     fprintf ( detailed3, "<td><IMG src=\"../hoehe%d.gif\" alt=\"%s\"> </td>",h, choehenstufen[h] );
                  else
                     fprintf ( detailed3, "<td> </td>" );
               fprintf ( detailed3, "</tr>");
            }


            for ( int h = 0; h < cmovemalitypenum; h++ ) {
               fprintf ( detailed3, "<tr><th class=\"WG\" >%s </th>", cmovemalitypes[h] );
               for ( int w = 0; w < ft->weapons.count ; w++)
                  fprintf ( detailed3, "<td>%d %% </td>", ft->weapons.weapon[w].targetingAccuracy[h] );
               fprintf ( detailed3, "</tr>");
            }
                                                                                                
            for ( int h = 0; h < 13; h++ ) {
               fprintf ( detailed3, "<tr><th class=\"WG\" >%i </th>", h-6 );
               for ( int w = 0; w < ft->weapons.count ; w++)
                  if ( ft->weapons.weapon[w].efficiency[h] > 0 )
                     fprintf ( detailed3, " <TD>%d %%</TD>", ft->weapons.weapon[w].efficiency[h] );
                  else
                     fprintf ( detailed3, " <TD> </TD>"  );

               fprintf ( detailed3, "</tr>");
            }

            fprintf ( detailed3, "</table> \n" );
            //ENDE WAFFEN





            //BEGINN CONSTRUCTIOn

            fprintf ( detailed4, "<table class=\"WG\">\n" );
            fprintf ( detailed4, "<tr><th align=\"center\" class=\"WG\">Constructable Objects </th><td>\n" );
            for ( unsigned int i = 0; i < ft->objectsBuildable.size(); i++ ) {
               for ( int b = 0; b < objecttypenum; b++ ) {
                  pobjecttype obj = getobjecttype_forpos ( b );
                  if (     obj->id >= ft->objectsBuildable[i].from
                        && obj->id <= ft->objectsBuildable[i].to ) {
                     fprintf ( detailed4, "%s (ID %d) <br>", obj->name.c_str(), obj->id );
                  }
               }
            }
            fprintf ( detailed4, "</td></tr>\n" );

             // Objekte abreissbar
            fprintf ( detailed4, "<tr><th align=\"center\" class=\"WG\">Destructable Objects </th><td>\n" );
            for ( unsigned int i = 0; i < ft->objectsRemovable.size(); i++ ) {
               for ( int b = 0; b < objecttypenum; b++ ) {
                  pobjecttype obj = getobjecttype_forpos ( b );
                  if (     obj->id >= ft->objectsRemovable[i].from
                        && obj->id <= ft->objectsRemovable[i].to ) {
                     fprintf ( detailed4, "%s (ID %d) <br>", obj->name.c_str(), obj->id );
                  }
               }
            }
            fprintf ( detailed4, "</td></tr>\n" );

            // UNITS
            fprintf ( detailed4, "<tr><th align=\"center\" class=\"WG\">Constructable Units </th><td>\n" );
            for ( unsigned int i = 0; i < ft->vehiclesBuildable.size(); i++ ) {
               for ( int b = 0; b < vehicletypenum; b++ ) {
                  pvehicletype veh = getvehicletype_forpos ( b );
                  if (     veh->id >= ft->vehiclesBuildable[i].from
                        && veh->id <= ft->vehiclesBuildable[i].to ) {
                     ASCString filename = extractFileName_withoutSuffix( veh->filename ) + ".html";
                     fprintf ( detailed4, "<A HREF=\"%s\" target=\"_parent\">%s (ID %d)</A> <br>", filename.c_str(), veh->getName().c_str(), veh->id );
                  }
               }
            }
            fprintf ( detailed4, "</td></tr>\n" );

            // Geb&auml;ude
            fprintf ( detailed4, "<tr><th align=\"center\" class=\"WG\">Constructable Buildings </th><td>\n" );
            for ( unsigned int i = 0; i < ft->buildingsBuildable.size(); i++ ) {
               for ( int b = 0; b < buildingtypenum; b++ ) {
                  pbuildingtype bld = getbuildingtype_forpos ( b );
                  if (     bld->id >= ft->buildingsBuildable[i].from
                           && bld->id <= ft->buildingsBuildable[i].to ) {
                     fprintf ( detailed4, "%s (ID %d) <br>", bld->name.c_str(), bld->id );
                  }
               }
            }
            fprintf ( detailed4, "</td></tr>\n" );
            fprintf ( detailed4, "</table>\n" );

            //ENDE FUNKTIONS




/*
            //BEGINN LOADING
            if ( ft->loadcapacity ) {
               fprintf ( detailed5, "<table align=\"left\"  class=\"WG\"> " );
               fprintf ( detailed5, "<tr><td align=\"center\" bgcolor=\"#20483f\">Einladbare UNITS</td></tr>" );

			   for ( int c = 0; c < cmovemalitypenum; c++ )
               if ( ft->vehicleCategoriesLoadable & (1 << c))
                  fprintf ( detailed5, "<tr><td align=\"center\" > %s </td></tr>", cmovemalitypes[c] );

               fprintf ( detailed5, "</table>" );

               fprintf ( detailed5, "<table  class=\"WG\">" );
               fprintf ( detailed5, "<tr><td align=\"center\" bgcolor=\"#20483f\">max. Zuladung</td> <td>%d</td> </tr>", ft->loadcapacity );
               fprintf ( detailed5, "<tr><td align=\"center\" bgcolor=\"#20483f\">max. Gewicht einer Einheit</td><td>%d</td> </tr>", ft->maxunitweight );
               fprintf ( detailed5, "</table>" );
<<<<<<< weaponguide.cpp

			   // Ladbar von H&ouml;henstufen
               fprintf ( detailed5, "<table  class=\"WG\"> \n" );
=======

			   // Ladbar von H&ouml;henstufen
               fprintf ( detailed5, "<table id=\"H10\" border=\"1\" bordercolordark=\"#333333\" bordercolorlight=\"#408050\" cellpadding=\"1\" cellspacing=\"1\"> \n" );
>>>>>>> 1.37
               // Überschriften
               fprintf ( detailed5,
                      "    <td bgcolor=\"#20483f\" colspan=\"9\" align=\"center\"> Voraussetzungen f&uuml;r das Ein- und Ausladen </td>"
                      "</tr>\n" );
               // GFX
               fprintf ( detailed5, "<tr><td></td>\n");
               // Höhenstufenzeichen einfügen für shoot from und target
               for ( i = 0; i < 8; i++ ) {
                  fprintf ( detailed5, " <TD><IMG src=\"../hoehe%d.gif\" ", i);
				  if ( i==0 )
                    fprintf (detailed5, " alt=\"deep_submerged / tief getaucht\" " );
                  if ( i==1 )
                    fprintf (detailed5, " alt=\"submerged / getaucht\" ");
                  if ( i==2 )
                    fprintf (detailed5, " alt=\"floating / schwimmend\" ");
                  if ( i==3 )
                    fprintf (detailed5, " alt=\"ground_based / fahrend\" ");
                  if ( i==4 )
                    fprintf (detailed5, " alt=\"low_level_flight / tief fliegend\" ");
                  if ( i==5 )
                    fprintf (detailed5, " alt=\"medium_level_flight / normale Flugh&ouml;he\" ");
                  if ( i==6 )
                    fprintf (detailed5, " alt=\"high_level_flight / sehr hoch fliegend\" ");
                  if ( i==7 )
                    fprintf (detailed5, " alt=\"orbit / Erdumlaufbahn\" ");
				  fprintf ( detailed5, "></TD>" );
               }
			   fprintf ( detailed5, "</tr>\n" );

			   // Höhenstufenzeichen einfügen für can load and unload from:
               fprintf ( detailed5, "<tr><td>UNIT muss auf dieser Stufe sein</td>" );
			   for ( int h = 0; h < 8; h++ ) {
                  if ( ft->loadcapability & (1 << h))
<<<<<<< weaponguide.cpp
                     fprintf ( detailed5, "<td><img src=\"../haken.gif\"></td> " );
=======
                     fprintf ( detailed5, "<td><img src=\"../hacken.gif\"></td> " );
>>>>>>> 1.37
			      else
                     fprintf ( detailed5, "<td></td>" );
			   }
	           fprintf ( detailed5,	"</tr>\n" );

			   // Höhenstufenzeichen einfügen für can load and unload from:
               fprintf ( detailed5, "<tr><td>UNIT muss diese Stufe selbst erreichen</td>" );
			   for ( int h = 0; h < 8; h++ ) {
                  if ( ft->loadcapabilityreq & (1 << h))
<<<<<<< weaponguide.cpp
                     fprintf ( detailed5, "<td><img src=\"../haken.gif\"></td> " );
=======
                     fprintf ( detailed5, "<td><img src=\"../hacken.gif\"></td> " );
>>>>>>> 1.37
			      else
                     fprintf ( detailed5, "<td></td>" );
			   }
	           fprintf ( detailed5,	"</tr>\n" );

	           // Höhenstufenzeichen einfügen für can load and unload from:
               fprintf ( detailed5, "<tr><td>UNIT darf diese Stufe selbst nicht erreichen</td>" );
			   for ( int h = 0; h < 8; h++ ) {
                  if ( ft->loadcapabilitynot & (1 << h))
                     fprintf ( detailed5, "<td><img src=\"../haken.gif\"></td> " );	
			      else
                     fprintf ( detailed5, "<td></td>" );
			   }
	           fprintf ( detailed5,	"</tr>\n" );
			   fprintf ( detailed5, "</table>\n" );            
			
			} else {
               fprintf ( detailed5, "<table align=\"left\"  class=\"WG\">" );
               fprintf ( detailed5, "<tr><td align=\"center\" bgcolor=\"#20483f\">&nbsp;</td></tr>" );
               fprintf ( detailed5, "<tr><td align=\"center\" ><br>Keine Transporteinheit !<br></td></tr>" );
               fprintf ( detailed5, "</table>" );
            }
            //ENDE LOADING
*/





            //BEGINN DESCRIPTION
            fprintf ( detailed6, "<H2>Informationen about this Unit</H2>" );
            if ( !ft->infotext.empty() ) {
               ASCString text = ft->infotext;
               while ( text.find ( "#crt#" ) != ASCString::npos )
                  text.replace ( text.find  ("#crt#"), 5, "<p>");
               while ( text.find ( "#CRT#" ) != ASCString::npos )
                  text.replace ( text.find  ("#CRT#"), 5, "<p>");
               while ( text.find ( "\n" ) != ASCString::npos )
                  text.replace ( text.find  ("\n"), 1, "<p>");
               while ( text.find ( "\r" ) != ASCString::npos )
                  text.replace ( text.find  ("\r"), 1, "");

               ASCString::size_type begin = 0;
               ASCString::size_type end = 0;
               do {
                  begin = text.find ( "#", end );
                  if ( begin != ASCString::npos && begin+1 < text.length() ) {
                     end = text.find ( "#", begin+1 );
                     if ( end != ASCString::npos ) {
                        text.erase ( begin, end-begin+1 );
                        begin = 0;
                        end = 0;
                     }
                  } else
                     end = ASCString::npos;
               } while ( end != ASCString::npos );

               fprintf ( detailed6, "%s", text.c_str() );
            }
            else {
               fprintf ( detailed6, "no information available " );
            }
            
            //ENDE DESCRIPTION


/*           // NEU - noch anzupassen
            for ( int h = 0; h < 8; h++ ) {
               if ( ft->loadcapability & (1 << h))
                  printf("H÷henstufe kann geladen werden" );

               if ( ft->loadcapabilityreq & (1 << h))
                  printf("H÷henstufe mu¯ erreichbar sein, um geladen werden zu k÷nnen" );

               if ( ft->loadcapability & (1 << h))
                  printf("H÷henstufe darf nicht erreichbar sein" );
            }

            // ft->loadcapacity  ist maximale ladekapazitõt
            for ( int c = 0; c < cmovemalitypenum; c++ )
               if ( ft->vehicleCategoriesLoadable & (1 << c))
                  printf(" Kategorie %s kann geladen werden", cmovemalitypes[c] );

            for (  i = 0; i < ft->buildingsBuildable.size(); i++ ) {
               printf("es können die gebäude mit ids von %d bis %d gebaut werden\n", ft->buildingsBuildable[i].from, ft->buildingsBuildable[i].to );
               for ( int b = 0; b < buildingtypenum; b++ ) {
                  pbuildingtype bld = getbuildingtype_forpos ( b );
                  if (     bld->id >= ft->buildingsBuildable[i].from
                           && bld->id <= ft->buildingsBuildable[i].to ) {
                     printf( "das gebõude mit id %d und dem Namen %s kann gebaut werden\n", bld->id, bld->name.c_str() );
                  }
               }
            }
*/
/*            for ( int i = 0; i  < ft->vehiclesBuildable.size(); i++ ) {
               printf("es können die einheiten mit ids von %d bis %d gebaut werden\n", ft->vehiclesBuildable[i].from, ft->vehiclesBuildable[i].to );
               for ( int b = 0; b < vehicletypenum; b++ ) {
                  pvehicletype veh = getvehicletype_forpos ( b );
                  if (     veh->id >= ft->vehiclesBuildable[i].from
                        && veh->id <= ft->vehiclesBuildable[i].to ) {
                     printf( "die einheit mit id %d und dem Namen %s kann gebaut werden\n", veh->id, veh->getName().c_str() );
                  }
               }
            }
*/
/*            for ( int i = 0; i < ft->objectsBuildable.size(); i++ ) {
               printf("es können die Objekte mit ids von %d bis %d gebaut werden\n", ft->objectsBuildable[i].from, ft->objectsBuildable[i].to );
               for ( int b = 0; b < objecttypenum; b++ ) {
                  pobjecttype obj = getobjecttype_forpos ( b );
                  if (     obj->id >= ft->objectsBuildable[i].from
                        && obj->id <= ft->objectsBuildable[i].to ) {
                     printf( "die einheit mit id %d und dem Namen %s kann gebaut werden\n", obj->id, obj->name.c_str() );
                  }
               }
            }
*/
            // ABSCHLU DER DOKUMENTE

            fprintf ( detailed1, "</body></html>\n");
            fprintf ( detailed2, "</body></html>\n");
            fprintf ( detailed3, "</body></html>\n");
            fprintf ( detailed4, "</body></html>\n");
            fprintf ( detailed5, "</body></html>\n");
            fprintf ( detailed6, "</body></html>\n");
            // Ende des Einheiten Dokuments

            fclose ( detailed );
            fclose ( detailed1 );
            fclose ( detailed2 );
            fclose ( detailed3 );
            fclose ( detailed4 );
            fclose ( detailed5 );
            fclose ( detailed6 );
            // closing the file

            #ifdef _UNIX_
            if ( cl.i() ) {
               tvirtualdisplay sb(100,100,255);
               putspriteimage ( 0, 0, ft->picture[0] );
               pal[255][0] = 254;
               pal[255][1] = 253;
               pal[255][2] = 252;
               writepcx ( "/tmp/weaponguide.pcx", 0, 0, fieldsizex, fieldsizey, pal );
               ASCString command = "convert /tmp/weaponguide.pcx -transparent \"#f8f4f0\" "; // -transparent 255
               command += prefixDir + cn;
               command += ".gif";
               // printf("%s\n", command.c_str() );
               printf("creating image...");
               system( command.c_str() );
            }
            #endif
            
            printf(" done \n" );
            // we are writing this not to a file, but the screen

         }

      }

      // Dokument Übersicht Ende

      fprintf( overview , "</table></body></html>\n" );
      fprintf ( overview1, "</body></html>\n" );

      fclose ( overview );
      fclose ( overview1 );


      printf("Generating unit listings");
      
      int counter = 0;
      for ( std::vector<SingleUnitSet*>::iterator i = unitSets.begin(); i != unitSets.end(); i++  ) {
         if ( (*i)->ID == cl.s() || !cl.s() ) {
            
            printf(".");
            ASCString filename = prefixDir + "unitset";
            if ( cl.s() > 0 )
               filename+=ASCString("_ID")+strrr(cl.s());
            else
               filename+=strrr(counter++);

            ASCString groupFile = filename + ".groups";
            FILE* ff = fopen ( groupFile.c_str(), "w" );

            fprintf(ff, "%s;asc.css;-;\n", (*i)->name.c_str() );


            const int groupNum = 5;
            const char* groupNames[groupNum] = { "ground units", "aircraft", "marine units", "turrets", "misc" };

            for ( int j = 0; j < groupNum; j++ ) {
               fprintf(ff, ".%s;asc.css;-;\n", groupNames[j] );
               vector<ASCString> units;

               for ( int unit = 0; unit < vehicletypenum; unit++ ) {
                  pvehicletype  ft = getvehicletype_forpos ( unit );
                  if ( (*i)->isMember( ft->id )) {
                     int group;
                     switch ( ft->movemalustyp ) {
                         case 1:  // "light tracked vehicle"
                         case 2:  // "medium tracked vehicle"
                         case 3:  // "heavy tracked vehicle",
                         case 4:  // "light wheeled vehicle",
                         case 5:  //  "medium wheeled vehicle",
                         case 6:  //  "heavy wheeled vehicle",
                         case 7:  //   "trooper"
                         case 8:   // "rail vehicle",
                                  group = 0;
                                  break;
                         case 9:   // "medium aircraft",
                         case 12:  // "light aircraft",
                         case 13:  // "heavy aircraft",
                         case 16:  //  "helicopter",
                                  group = 1;
                                  break;
                         case 10:  // "medium ship",
                         case 14:  // "light ship",
                         case 15:  // "heavy ship",
                                  group = 2;
                                  break;

                         case 11:  // "building / turret / object",
                                  group = 3;
                                  break;

                         case 0:  // default",
                         case 17: // "hoovercraft"
                         default:
                                  group = 4;
                                  break;
                     };
                     if ( group == j ) {
                        ASCString unitFileName = ASCString(extractFileName_withoutSuffix( ft->filename )) + ".html";
                        ASCString linkpref = cl.l();
                        if ( !linkpref.empty() )
                           appendbackslash( linkpref );
                           
                        ASCString line;
                        line.format("..%s;asc.css;\"%s%s\" target=\"main\";\n", ft->getName().c_str(), linkpref.c_str(), unitFileName.c_str());
                        units.push_back(line);
                     }
                  }
               }
               sort ( units.begin(), units.end());
               for ( int u = 0; u < units.size(); u++ )
                  fprintf(ff, "%s",units[u].c_str() );
               
            }   
        
            fclose(ff);
         }
                     
      }
      printf("\n");

      
   } /* endtry */
   catch ( tfileerror err ) {
      fatalError("fatal error accessing file " + err.getFileName() );
      return 1;
   } /* endcatch */
   catch ( ASCmsgException err ) {
      fatalError("a fatal exception occured: " + err.getMessage() );
      return 2;
   } /* endcatch */
   catch ( ASCexception ) {
      fatalError("\na fatal exception occured\n" );
      return 2;
   } /* endcatch */

   return 0;
};



